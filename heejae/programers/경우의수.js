// 높이는 고정이니 길쭉이 전부 세워서 가로 n개 다체우고 시작.
// 1. 연속되는 길쭉이 2개 고르면 ㄱ자 블럭 두개로 90도 돌리면서 2가지 방법 바꿔진다.
//  => n줄 중 연속된 두줄을 고르는 경우의수 구하는법은 뒤에 다시 힌트

// 2. 연속된는 3줄을 골라서 가로로 눕히면 거기서 다시 위두줄이나 아래 두줄 선택해서 ㄱ자로 바꿀수 있다.
//  => 연속된 두줄 고르면서 남겨진 세로줄중 붙어 잇는거에서 3줄이상 붙어있는거 고르는수 해서 곱하면 답;

// 3. n개중 2개씩 고르는 방법은  연속되는 묶음이  있을때 남은 빈칸을 좌우에 뿌리면 된다. 예를 들어 20개중에 2개식 분은 3개 고르는건 내가 막대기 10개중에 2개씩 6줄은 미리 배치하고 사이 빈칸 <  > 에 남은 14개 뿌리면 된다.
// < >  2 < >  2 < > 2  < >      
// 순서 상관없이 14개를 4개로 나누는건 고딩때 배우는 중복조합 4H14이나  분할로 한방에 게산할수도 있는데  이러면 3개짜리 따로 하기 힘드니 이걸 2개씩 고르는 갯수를 for 문등을 이용해 올리면서 사이에 들어가는 갯수를 스택까지는 아니고 그냥 숫자 ++해줘서 3개고르는 경우수 구해서 곱해주면 됨

// 4. 자바스크립트는 n이 너무 커서 재귀로 안풀린다!

function solution(n) {
  const m = 1000000007;

  //세로로 긴거 전부 배열   1

  // / n개중 연속한 2개씩 순서에 상관없이 고르는 경우의 수
  // / 붙은 두줄씩 선택해서 ㄱ 자로 바꾸기 *3

  // 가로 바꿔 넣는 경우수 세기
  // 연속한 3개의 세로를 순서에 상관없이 고르는 경우의 수
  // 눕힌 세줄중 속한 두줄 고르는수 2 * ㄱ자 블럭 바꾸는 겨우 *3


  // n개중 연속한 2개 고르기
  // 1쌍 고르기 = n-1번
  // 2쌍 고르기 = n-1번, + n-2개중 2개 고르기 

  // k!
  let fac = (k) => {
    if (k==0 || k == 1) return 1;
    return k * fac(k - 1);
  }

  // 서로다른 n개를 중복허용해서 구분없이 r개 선택 하는 경우수
  let nhr = (n, r) => {
    return fac(n + r - 1) / fac(n - 1) / fac(r);
  }

  // p개중 3개를 선택하는 경우의 수
  let sel3 = (p) => {
    let ans = 0;
    for (let i = 1; i <= p / 3; i++) {
      ans += nhr(i + 1, p - (3 * i))
    }
    return ans;
  }
 
  let sel2 = (p) => {
    // 세로로 그대로 세워두기를 2개를 0부터 ~n/2개까지 선택하는 경우의 수
    for (let i = 0; i <= n / 2; i++) {
      (i + 1) ** (n - 2 * i)
    }
  }

}

console.log(solution(
  3
))
// 10


